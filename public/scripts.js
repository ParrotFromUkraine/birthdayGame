const { response } = require("express");

const present = {
  mafin: '–ó –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ö—ñ—Ä–∞, –±–∞–∂–∞—é —Ç–æ–±—ñ —â–∞—Å—Ç—è, –∑–¥–æ—Ä–æ–≤ º—è, —É—Å–ø—ñ—Ö—ñ–≤ –≤ –∂–∏—Ç—Ç—ñ . –•–æ—á—É —â–æ–± –≤ —Ü–µ–π –¥–µ–Ω—å —É —Ç–µ–±–µ –±—É–ª–∞ —Ç—ñ–ª—å–∫–∏ –ø–æ—Å–º—ñ—à–∫–∞ —Ç–∞ —Ä–∞–¥—ñ—Å—Ç—å –Ω–∞ –æ–±–ª–∏—á—á—ñ ü•≥ü•≥ü•≥',
  limon: '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –ø–æ–∑–¥—Ä–∞–≤–µ–ª–Ω–∏—è((',
  parrot: '–ö–∏—Ä–æ—á–∫–∞))\n–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, —Å–æ–ª–Ω—ã—à–∫–æ!\n–ü—É—Å—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å—ë –≤–æ–∫—Ä—É–≥ —Å–∏—è–µ—Ç –¥–ª—è —Ç–µ–±—è: —É–ª—ã–±–∫–∏, —Ü–≤–µ—Ç—ã, —Å–ª–æ–≤–∞.\n–¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–µ–µ —á—É–¥–æ, –∏ —è –±–µ–∑—É–º–Ω–æ —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏.ü•π\n–ñ–µ–ª–∞—é —Ç–µ–±–µ —Å—á–∞—Å—Ç—å—è, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –≤ –º—É–∑—ã–∫–µ –∏ –≤–æ–ª—à–µ–±–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n–¢–≤–æ–π –ø–µ—Ä–Ω–∞—Ç—ã–π –∏–∑ –£–∫—Ä–∞–∏–Ω—ã)))ü¶ú‚ù§Ô∏èüòò',
  yamma: '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –Ø—à–º–∞ ‚Äî –∫–∞–º–µ–Ω—å —Ç–≤—ë—Ä–¥—ã–π, –Ω–æ —Å–µ—Ä–¥—Ü–µ –º—è–≥–∫–æ–µ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –¥–Ω—é—Ö–æ–π! –ü—É—Å—Ç—å –∂–∏–∑–Ω—å –±—É–¥–µ—Ç —è—Ä—á–µ –º–æ–∏—Ö —É–∑–æ—Ä–æ–≤, –∞ —Å—á–∞—Å—Ç—å–µ –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç —Ç–µ–±—è —Ç–∞–∫ —É–ø–æ—Ä–Ω–æ, –∫–∞–∫ —è ‚Äî –ª—é–±–∏—Ç–µ–ª–µ–π –≥—Ç–∞ 5 –∏ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø–æ–±—Ä—è–∫—É—à–µ–∫!',
  toniked: '–ø–∞–¥—à–∏–π —Ä—ã—Ü–∞—Ä—å –∏–∑ —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ª–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞, —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ü–µ–ª—É—é —Ä—É–∫—É –ø—Ä–µ–∫–ª–æ–Ω—è—é –∫–æ–ª–µ–Ω–æ –∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Å–∫–∞–∑–∞—Ç—å "–¥–∞–∂–µ —Å–∞–º–∞—è —Ç–µ–º–Ω–∞—è –Ω–æ—á—å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ä–∞—Å—Å–≤–µ—Ç–æ–º"',
  luka: '–ü–∏—Å—å–º–æ –∫–∏—Ä–∞ –ø—Ä–∏–≤–µ—Ç —è –ª—É–∫–∞ —è –æ—á–µ–Ω—å –¥—É–º–∞–ª –∏ –≤—Å–ø–æ–º–Ω–∏–ª —É—Ç–µ–±—è –¥–µ–Ω—å —Ä–∞–∂–¥–µ–Ω–∏—è ! –ø–∞–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è –∫–∏—Ä–∞ - @luka',
  stalker: '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –ø–æ–∑–¥—Ä–∞–≤–µ–ª–Ω–∏—è((',
  katana_lk: '–ì–æ–ª–æ–≤–æ–π –ø–æ —á–∞—â–µ –¥—É–º–∞–π... –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å...',
  secret: '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: –¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è –ö–∏—Ä–æ—á–∫–∞ –Ω–∞ —Å–≤–µ—Ç–µ! üíñ'
};

const storySteps = [
  {
    id: 'start',
    hint: "–ü—Ä–∏–≤–µ—Ç, –ö–∏—Ä–∞! –¢–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–≥–∏–∏! –õ–æ–≥–∏–Ω?",
    branches: [
      { answer: "Kira", next: 'portal', response: "–û, –ö–∏—Ä–∞, —ç—Ç–æ —Ç—ã! –í–æ–π–¥–∏ –≤ –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!" },
      { answer: "Parrot", next: 'parrotSecret', response: "–ü–æ–ø—É–≥–∞–π? –¢—ã –∑–Ω–∞–µ—à—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥!" },
      { answer: "help", response: "–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'Kira'.", next: 'start' }
    ]
  },
  {
    id: 'portal',
    hint: "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–∏—è—é—â–∏–π –ø–æ—Ä—Ç–∞–ª. –ù–∞–∑–æ–≤–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ (–ø–æ–¥—Å–∫–∞–∑–∫–∞: —Å–≤—è–∑–∞–Ω–æ —Å 'magic' –∏ 'kira')",
    branches: [
      { answer: "magickira", next: 'enchantedKingdom', response: "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ! –ü–æ—Ä—Ç–∞–ª –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ç–µ–±—è –≤ –ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–æ–µ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ!" },
      { answer: "help", response: "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–µ–¥–∏–Ω–∏—Ç—å 'magic' –∏ —Ç–≤–æ—ë –∏–º—è.", next: 'portal' }
    ]
  },
  {
    id: 'enchantedKingdom',
    hint: "–¢—ã –≤ –ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–æ–º –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ! –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Ç—Ä–∏ –ø—É—Ç–∏: [castle] [forest] [lake]. –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è?",
    branches: [
      { answer: "castle", next: 'castleGate', response: "–¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∑–∞–º–∫—É, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–∞–π–Ω—ã –ø—Ä–æ—à–ª–æ–≥–æ." },
      { answer: "forest", next: 'forestPath', response: "–¢—ã –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å, –ø–æ–ª–Ω—ã–π –º–∞–≥–∏–∏ –∏ –∑–∞–≥–∞–¥–æ–∫." },
      { answer: "lake", next: 'lakeShore', response: "–¢—ã —É –æ–∑–µ—Ä–∞, –≥–¥–µ –≤–æ–¥–∞ —à–µ–ø—á–µ—Ç –º–µ–ª–æ–¥–∏–∏ —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–¥—Ü–∞." },
      { answer: "help", response: "–í—ã–±–µ—Ä–∏: castle, forest –∏–ª–∏ lake.", next: 'enchantedKingdom' }
    ]
  },
  {
    id: 'castleGate',
    response: "–°—Ç—Ä–∞–∂ –∑–∞–º–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å. –ù–∞–∑–æ–≤–∏ —Å–ª–æ–≤–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ç–≤–æ–µ–π –º–µ—á—Ç–æ–π.",
    hint: "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ (–ø–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ-—Ç–æ –æ –º–µ—á—Ç–∞—Ö):",
    branches: [
      { answer: "dream", next: 'castleHall', response: "–°—Ç—Ä–∞–∂ –∫–∏–≤–∞–µ—Ç: '–í–µ—Ä–Ω–æ!' –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –∑–∞–º–æ–∫." },
      { answer: "help", response: "–ü–æ–¥—É–º–∞–π –æ —Å–ª–æ–≤–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å –º–µ—á—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'dream'.", next: 'castleGate' }
    ]
  },
  {
    id: 'castleHall',
    response: "–í –∑–∞–ª–µ –∑–∞–º–∫–∞ —Ç—Ä–∏ —Å—É–Ω–¥—É–∫–∞: [gold] [silver] [crystal]. –ö–∞–∫–æ–π –æ—Ç–∫—Ä–æ–µ—à—å?",
    hint: "–í—ã–±–µ—Ä–∏ —Å—É–Ω–¥—É–∫: [gold] [silver] [crystal]",
    branches: [
      { answer: "gold", next: 'goldChest', response: "–ó–æ–ª–æ—Ç–æ–π —Å—É–Ω–¥—É–∫ —Å–∏—è–µ—Ç —è—Ä–∫–æ, –∫–∞–∫ —Ç–≤–æ—è —É–ª—ã–±–∫–∞!" },
      { answer: "silver", next: 'silverChest', response: "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—É–Ω–¥—É–∫ —Ö—Ä–∞–Ω–∏—Ç —á—Ç–æ-—Ç–æ –Ω–µ–∂–Ω–æ–µ –∏ —Ç—ë–ø–ª–æ–µ." },
      { answer: "crystal", next: 'crystalChest', response: "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫ –ø–µ—Ä–µ–ª–∏–≤–∞–µ—Ç—Å—è, —Å–ª–æ–≤–Ω–æ —Ç–≤–æ–∏ –º–µ—á—Ç—ã!" },
      { answer: "help", response: "–í—ã–±–µ—Ä–∏: gold, silver –∏–ª–∏ crystal.", next: 'castleHall' }
    ]
  },
  {
    id: 'goldChest',
    response: "–í –∑–æ–ª–æ—Ç–æ–º —Å—É–Ω–¥—É–∫–µ: " + present.mafin + "\n\n–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–∫–∞—Ç—å —Å–æ–∫—Ä–æ–≤–∏—â–∞?",
    hint: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [yes/no/secret]",
    branches: [
      { answer: "yes", next: 'castleHall', response: "–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –≤ –∑–∞–ª –∑–∞–º–∫–∞." },
      { answer: "no", next: 'happyEnding', response: "–¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –ø—É—Ç—å –≤ –∑–∞–º–∫–µ..." },
      { answer: 'secret', next: 'joinSecret' }
    ]
  },

  {
    id: 'joinSecret',
    response: '–¢—ã –ø–æ–ø–∞–ª–∞ –≤ —Å–µ–∫—Ä–∞—Ç–Ω—ã–π —Ç—É–Ω–µ–ª—å...',
    hint: '–≠—Ç–æ—Ç —Ç—É–Ω–µ–ª—å –≤–µ–¥—ë—Ç –≤ –ø—Ä–æ—à–ª–æ–µ —Ç—ã –≥–æ—Ç–æ–≤–∞ –∫ —ç—Ç–æ–º—É?',
    branches: [
      { answer: 'yes', next: 'parrotSecret', response: '–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–µ...' },
      { answer: 'no', next: 'castleHall', response: '–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –≤ –∑–∞–ª –∑–∞–º–∫–∞.' }
    ]
  },

  {
    id: 'oldstart',
    response: 'Tam longe in praeteritum progressus es ut lingua hic celeberrima Latina sit...',
    hint: 'Paululum retro in tempus revertamur et ad versionem beta universi revertamur.Ut progrediamur, dic tantum "ad futurum progredi".',
    branches: [
      { answer: 'ad futurum progredi', next: 'betaLife', response: 'Ad futurum progressus es. Mundi magici iterum aperti sunt!' }
    ]
  },

  {
   id: 'betaLife',
   response: '',
  },
 {
    id: 'oldstart',
    hint: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    branches: [
      { answer: "Kira", next: 'oldlogin', response: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ö–∏—Ä–∞. –í–∞–º –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É." },
      { answer: "Parrot", next: 'oldparrotSecret', response: "–ü—Ä–∏–≤–µ—Ç, –ø–æ–ø—É–≥–∞–π! –£ —Ç–µ–±—è –µ—Å—Ç—å –æ—Å–æ–±—ã–π –¥–æ—Å—Ç—É–ø." }
    ]
  },
  {
    id: 'oldlogin',
    hint: "–í–≤–µ–¥–∏—Ç–µ email: (parootSystem.email == <ukrGmail>)",
    branches: [
      { answer: "parootsystem.email == kiralynnykmylove@gmail.com", next: 'oldpassword', response: "–£—Å–ø–µ—à–Ω–æ!" },
      { answer: "help", response: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: email —Å–æ–¥–µ—Ä–∂–∏—Ç 'kiralynnykmylove'", next: 'oldlogin' }
    ]
  },
  {
    id: 'oldpassword',
    hint: "–í–≤–µ–¥–∏—Ç–µ password: (parootSystem.password == <password>)",
    branches: [
      { answer: "parootsystem.password == sudoloveme", next: 'oldtask', response: "–£—Å–ø–µ—à–Ω–æ!\n\nKira sign in" },
      { answer: "help", response: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–∞—Ä–æ–ª—å —Å–≤—è–∑–∞–Ω —Å 'sudo' –∏ 'love'", next: 'oldpassword' }
    ]
  },

  {
    id: 'oldfolderList',
    response: 'kiraLynnyk/    telegrambot/    root/',
    branches: [
      { answer: 'open telegrambot', next: 'oldtelegramBotFolder', response: "–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–ø–∫—É telegrambot..." },
      { answer: 'open root', response: '–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ', next: 'oldfolderList' },
      { answer: 'help', response: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ "open telegrambot"', next: 'oldfolderList' }
    ]
  },
  {
    id: 'oldtelegramBotFolder',
    response: 'bot.js   hidden_pipi   package.json',
    hint: '–í—ã –≤ –ø–∞–ø–∫–µ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞',
    branches: [
      { answer: 'check bot.js', next: 'oldcheck bot.js', response: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é bot.js..." },
      { answer: 'check hidden_pipi.txt', next: 'olddecrypt', response: '–§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å?' },
      { answer: 'check package.json', next: 'oldcheck package.json', response: "–ü—Ä–æ–≤–µ—Ä—è—é package.json..." },
      { answer: 'back', next: 'oldfolderList', response: "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è..." }
    ]
  },
  {
    id: 'oldcheck bot.js',
    response: '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —á—Ç–æ–± –≤–∞–º –ø–æ–º–æ–≥–∞–ª–∞ –Ω–µ–π—Ä–æ–Ω–∫–∞???',
    branches: [
      { answer: 'yes', next: 'oldpipi starting', response: "–ê–∫—Ç–∏–≤–∏—Ä—É—é –Ω–µ–π—Ä–æ–Ω–∫—É..." },
      { answer: 'no', next: 'oldtelegramBotFolder', response: "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è..." }
    ]
  },
  {
    id: 'oldpipi starting',
    response: '–ó—Ä—è...\n\n–ü.–ò.–ü.–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°–∏—Å—Ç–µ–º–∞ –∑–∞—Ä–∞–∂–µ–Ω–∞.',
    hint: '–í—ã –∑–¥–µ–ª–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–≤–µ—Ä—è–π—Ç–µ –Ω–µ–π—Ä–æ–Ω–∫–∞–º.'
  },
  {
    id: 'oldcheck package.json',
    response: '–í–∞–º —Ç—É—Ç –Ω–µ —Å–ª–µ–¥—É–µ—Ç –Ω–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥',
    next: 'telegramBotFolder'
  },
  {
    id: 'olddecrypt',
    hint: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
    branches: [
      { answer: 'decrypt hidden_pipi.txt', next: 'oldwarning', response: '"–û–ù –õ–ñ–ï–¶. –≠–¢–û –ù–ï –ü–û–ú–û–©–ù–ò–ö."' },
      { answer: 'cancel', next: 'oldtelegramBotFolder', response: "–û—Ç–º–µ–Ω–∞..." }
    ]
  },
  {
    id: 'oldwarning',
    hint: '–í—ã –¥–æ–ª–∂–Ω—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ-—Ç–æ —Ç–∞–∫–æ–π (1697965694) –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ @username —Å—é–¥–∞ (–í —ç—Ç–æ–º –ø–æ–º–æ–∂–µ—Ç @myidbot)',
    branches: [
      { answer: '@r0st1sIav_999', next: 'secondRound', response: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥..." },
      { answer: 'help', response: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –±–æ—Ç–∞ @myidbot —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å username –ø–æ ID", next: 'warning' }
    ]
  },
  {
    id: "secondRound",
    hint: '–í—ã –¥–æ–ª–∂–Ω—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ-—Ç–æ —Ç–∞–∫–æ–π (1496894138) –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ @username —Å—é–¥–∞ (–í —ç—Ç–æ–º –ø–æ–º–æ–∂–µ—Ç @myidbot)',
    branches: [
      { answer: "@ce09a", next: 'therthround', response: "–í–µ—Ä–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º..." },
      { answer: 'help', response: "–≠—Ç–æ ID –¥—Ä—É–≥–æ–≥–æ –¥—Ä—É–≥–∞ –ö–∏—Ä—ã", next: 'secondRound' }
    ]
  },
  {
    id: 'therthround',
    response: '240508-Steam',
    branches: [
      { answer: "ParrotFromUkraine", next: 'aftParrotFromUkraine', response: "–î–∞! –≠—Ç–æ Steam ID –ø–æ–ø—É–≥–∞—è!" }
    ]
  },
  {
    id: 'aftYamma',
    response: '–Æ–±–∏–ª–µ–π? d/m/y',
    branches: [
      { answer: '20/05/2025', next: 'aftDays', response: "–ò–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å—ë –Ω–∞—á–∞–ª–æ—Å—å!" }
    ]
  },
  {
    id: "aftDays",
    response: '–ü–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –ö–∏—Ä—ã –¥–ª—è –ø–æ–ø—É–≥–∞—è',
    branches: [
      { answer: '–ü–æ–ø—É–≥–∞–π', next: "aftParrot", response: "–î–∞! –≠—Ç–æ –±—ã–ª –ª–µ–≥–æ –ø–æ–ø—É–≥–∞–π!" }
    ]
  },
  {
    id: "aftParrot",
    response: 'DevParrot...Forever',
    branches: [
      { answer: 'WithLove', next: 'finalMessage', response: "‚ù§Ô∏è" }
    ]
  },
  {
    id: 'finalMessage',
    response: '–í—ã —Ä–∞–∑–≤–µ—è–ª–∏ –≤—Å–µ –∑–∞—â–∏—Ç—ã. –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, –ö–∏—Ä–æ—á–∫–∞!\n\n–≠—Ç–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.\n\n–õ—é–±–ª—é —Ç–µ–±—è! –¢–≤–æ–π –ø–æ–ø—É–≥–∞–π. ü¶ú‚ù§Ô∏è',
    next: 'restart'
  },
  {
    id: 'silverChest',
    response: "–í —Å–µ—Ä–µ–±—Ä—è–Ω–æ–º —Å—É–Ω–¥—É–∫–µ: " + present.yamma + "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ?",
    hint: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [yes/no]",
    branches: [
      { answer: "yes", next: 'castleHall', response: "–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –≤ –∑–∞–ª –∑–∞–º–∫–∞." },
      { answer: "no", next: 'happyEnding', response: "–¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –ø—É—Ç—å –≤ –∑–∞–º–∫–µ..." }
    ]
  },
  {
    id: 'crystalChest',
    response: "–í –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–º —Å—É–Ω–¥—É–∫–µ: " + present.secret + "\n\n–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
    hint: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [yes/no]",
    branches: [
      { answer: "yes", next: 'castleHall', response: "–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –≤ –∑–∞–ª –∑–∞–º–∫–∞." },
      { answer: "no", next: 'happyEnding', response: "–¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –ø—É—Ç—å –≤ –∑–∞–º–∫–µ..." }
    ]
  },
  {
    id: 'forestPath',
    response: "–í –ª–µ—Å—É —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –¥—Ä–µ–≤–Ω–µ–µ –¥—Ä–µ–≤–æ. –ö–∞–∫–æ–π –ª–∏—Å—Ç —Ç—ã –≤—ã–±–µ—Ä–µ—à—å?",
    hint: "–í–≤–µ–¥–∏ —Ç–∏–ø –ª–∏—Å—Ç–∞ (–ø–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–¥—É–º–∞–π –æ –ø—Ä–∏—Ä–æ–¥–µ):",
    branches: [
      { answer: "oak", next: 'oakLeaf', response: "–î—É–±–æ–≤—ã–π –ª–∏—Å—Ç —à–µ–ø—á–µ—Ç –æ —Å–∏–ª–µ –∏ —Å—Ç–æ–π–∫–æ—Å—Ç–∏!" },
      { answer: "maple", next: 'mapleLeaf', response: "–ö–ª–µ–Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å–∏—è–µ—Ç —è—Ä–∫–∏–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏!" },
      { answer: "help", response: "–ü–æ–ø—Ä–æ–±—É–π 'oak' –∏–ª–∏ 'maple'.", next: 'forestPath' }
    ]
  },
  {
    id: 'oakLeaf',
    response: "–î—É–±–æ–≤—ã–π –ª–∏—Å—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç: " + present.toniked + "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?",
    hint: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [yes/no]",
    branches: [
      { answer: "yes", next: 'enchantedKingdom', response: "–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ." },
      { answer: "no", next: 'happyEnding', response: "–¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –ø—É—Ç—å –≤ –ª–µ—Å—É..." }
    ]
  },
  {
    id: 'mapleLeaf',
    response: "–ö–ª–µ–Ω–æ–≤—ã–π –ª–∏—Å—Ç –¥–∞—Ä–∏—Ç: " + present.luka + "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ?",
    hint: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [yes/no]",
    branches: [
      { answer: "yes", next: 'enchantedKingdom', response: "–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ." },
      { answer: "no", next: 'happyEnding', response: "–¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –ø—É—Ç—å –≤ –ª–µ—Å—É..." }
    ]
  },
  {
    id: 'lakeShore',
    response: "–ù–∞ –±–µ—Ä–µ–≥—É –æ–∑–µ—Ä–∞ —Ç—ã –≤–∏–¥–∏—à—å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ. –ù–∞–∑–æ–≤–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å:",
    hint: "–í–≤–µ–¥–∏, —á—Ç–æ –≤–∏–¥–∏—à—å (–ø–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ-—Ç–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ):",
    branches: [
      { answer: "melody", next: 'lakeMelody', response: "–û—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–ª–æ–¥–∏—é, –∑–≤—É—á–∞—â—É—é –≤ —Ç–≤–æ—ë–º —Å–µ—Ä–¥—Ü–µ!" },
      { answer: "help", response: "–ü–æ–¥—É–º–∞–π –æ –º—É–∑—ã–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'melody'.", next: 'lakeShore' }
    ]
  },
  {
    id: 'lakeMelody',
    response: "–û–∑–µ—Ä–æ –ø–æ—ë—Ç: " + present.parrot + "\n\n–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
    hint: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [yes/no]",
    branches: [
      { answer: "yes", next: 'enchantedKingdom', response: "–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ." },
      { answer: "no", next: 'happyEnding', response: "–¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –ø—É—Ç—å —É –æ–∑–µ—Ä–∞..." }
    ]
  },
  {
    id: 'happyEnding',
    response: '–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, –ö–∏—Ä–æ—á–∫–∞! üéÇ\n\n–≠—Ç–æ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ª—é–±–æ–≤—å—é –¥–ª—è —Ç–µ–±—è!\n–¢–≤–æ–π –ø–æ–ø—É–≥–∞–π. ü¶ú‚ù§Ô∏è',
    next: 'restart'
  },
  {
    id: 'parrotSecret',
    response: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n' + present.parrot + '\n\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏–∑ –£–∫—Ä–∞–∏–Ω—ã ü¶ú‚ù§Ô∏è',
    next: 'restart'
  },
  {
    id: 'restart',
    response: '–í–≤–µ–¥–∏—Ç–µ "restart" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
    branches: [
      { answer: 'restart', next: 'start', response: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è...' }
    ]
  }
];

const easterEggs = [
  { trigger: "sudo love me baby", response: "–ü–æ–ø—É–≥–∞–π –æ–±–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è –∫—Ä—ã–ª—å—è–º–∏ –∏ —à–µ–ø—á–µ—Ç: '–¢—ã –≤–æ–ª—à–µ–±–Ω–∞!'" },
  { trigger: "sudo rm sandwich", response: "–°–µ–Ω–¥–≤–∏—á–∏ –∏—Å—á–µ–∑–ª–∏ –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–º –≤–∏—Ö—Ä–µ! üò¢" },
  { trigger: "42", response: "–û—Ç–≤–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ..." },
  { trigger: "mafin", response: present.mafin },
  { trigger: "yamma", response: present.yamma },
  { trigger: "parrot", response: `${present.parrot}\n\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏–∑ –£–∫—Ä–∞–∏–Ω—ã` },
  { trigger: 'limon', response: present.limon },
  { trigger: 'toniked', response: present.toniked },
  { trigger: 'luka', response: present.luka },
  { trigger: 'stalker', response: present.stalker },
  { trigger: 'katana', response: present.katana_lk },
  { trigger: 'secret', response: present.secret },
  { trigger: 'happy birthday', response: '–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, –ö–∏—Ä–æ—á–∫–∞! üéÇüéâ' },
  { trigger: 'i love you', response: '–Ø —Ç–æ–∂–µ —Ç–µ–±—è –ª—é–±–ª—é! ‚ù§Ô∏è' },
  { trigger: 'popugai', response: 'ü¶ú chirick! ü¶ú' }
];

let currentStepId = 'start';

const storyHint = document.getElementById('storyHint');
const terminalOutput = document.getElementById('terminalOutput');
const terminalInput = document.getElementById('terminalInput');
const gameContainer = document.getElementById('gameContainer');
const blackScreen = document.getElementById('blackScreen');
const loadingText = document.getElementById('loadingText');

function getStepById(id) {
  return storySteps.find(step => step.id === id);
}

function updateHint() {
  const step = getStepById(currentStepId);
  storyHint.textContent = step?.hint || "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ 'restart' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.";
}

function triggerWipeSequence() {
  gameContainer.style.display = 'none';
  blackScreen.style.display = 'flex';
  loadingText.textContent = "–ú–∞–≥–∏—è –∏—Å—á–µ–∑–∞–µ—Ç...";

  setTimeout(() => loadingText.textContent = "–ú–∏—Ä —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è...", 2000);
  setTimeout(() => loadingText.textContent = "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∏–∏...", 4000);
  setTimeout(() => loadingText.textContent = "–ü—Ä–∏–≤–µ—Ç, –ö–∏—Ä–∞!", 6000);

  setTimeout(() => {
    terminalOutput.innerHTML = "";
    currentStepId = 'start';
    updateHint();
    blackScreen.style.display = 'none';
    gameContainer.style.display = 'block';
    terminalInput.focus();
  }, 8000);
}

function normalize(str) {
  return str.toLowerCase().trim().replace(/\s+/g, ' ');
}

terminalInput.addEventListener('keydown', function (e) {
  if (e.key === 'Enter') {
    const userInput = terminalInput.value.trim();
    terminalOutput.innerHTML += `<div>&gt; ${userInput}</div>`;

    if (userInput === "sudo rm -rf /") {
      triggerWipeSequence();
      terminalInput.value = '';
      return;
    }

    const egg = easterEggs.find(e => normalize(e.trigger) === normalize(userInput));
    if (egg) {
      terminalOutput.innerHTML += `<div class="easter-egg">${egg.response}</div>`;
    } else {
      const currentStep = getStepById(currentStepId);
      const match = currentStep?.branches?.find(branch => normalize(branch.answer) === normalize(userInput));

      if (match) {
        if (match.response) terminalOutput.innerHTML += `<div>${match.response}</div>`;
        if (match.next) {
          currentStepId = match.next;
          const nextStep = getStepById(currentStepId);
          if (nextStep?.response) {
            terminalOutput.innerHTML += `<div>${nextStep.response}</div>`;
          }
          updateHint();
        }
      } else {
        terminalOutput.innerHTML += `<div>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!</div>`;
      }
    }

    terminalInput.value = '';
    terminalOutput.scrollTop = terminalOutput.scrollHeight;
  }
});

// Initialize the game
updateHint();
terminalInput.focus();

// Show initial step response if exists
const initialStep = getStepById(currentStepId);
if (initialStep?.response) {
  terminalOutput.innerHTML += `<div>${initialStep.response}</div>`;
}

console.log("Scripts loaded correct")
