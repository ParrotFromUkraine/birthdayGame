const { response } = require("express");

const steamId = {
  parrotFromUkraine: '',
  yamma: '',
  toniket: '',
  ukraineAccount: ''
}

const present = {
  mafin: '–ó –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ö—ñ—Ä–∞, –±–∞–∂–∞—é —Ç–æ–±—ñ —â–∞—Å—Ç—è, –∑–¥–æ—Ä–æ–≤ º—è, —É—Å–ø—ñ—Ö—ñ–≤ –≤ –∂–∏—Ç—Ç—ñ . –•–æ—á—É —â–æ–± –≤ —Ü–µ–π –¥–µ–Ω—å —É —Ç–µ–±–µ –±—É–ª–∞ —Ç—ñ–ª—å–∫–∏ –ø–æ—Å–º—ñ—à–∫–∞ —Ç–∞ —Ä–∞–¥—ñ—Å—Ç—å –Ω–∞ –æ–±–ª–∏—á—á—ñ ü•≥ü•≥ü•≥',
  limon: '',
  parrot: '',
  yamma: '',
  toniked: '',
  luka: '–ü–∏—Å—å–º–æ –∫–∏—Ä–∞ –ø—Ä–∏–≤–µ—Ç —è  –ª—É–∫–∞ —è –æ—á–µ–Ω—å –¥—É–º–∞–ª –∏ –≤—Å–ø–æ–º–Ω–∏–ª —É—Ç–µ–±—è –¥–µ–Ω—å —Ä–∞–∂–¥–µ–Ω–∏—è ! –ø–∞–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è –∫–∏—Ä–∞ - @luka',
  stalker: ' ',
  katana_lk: '–ì–æ–ª–æ–≤–æ–π –ø–æ —á–∞—â–µ –¥—É–º–∞–π... –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å...', // –î–æ—Å–ª–æ–≤–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
};

const storySteps = [
  {
    id: 'start',
    hint: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    branches: [
      { answer: "Kira", next: 'login', response: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ö–∏—Ä–∞. –í–∞–º –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É." }
    ]
  },
  {
    id: 'login',
    hint: "–í–≤–µ–¥–∏—Ç–µ email: (parootSystem.email == <ukrGmail>)",
    branches: [
      { answer: "parootsystem.email == kiralynnykmylove@gmail.com", next: 'password', response: "–£—Å–ø–µ—à–Ω–æ!" }
    ]
  },
  {
    id: 'password',
    hint: "–í–≤–µ–¥–∏—Ç–µ password: (parootSystem.password == <password>)",
    branches: [
      { answer: "parootsystem.password == sudoloveme", next: 'task', response: "–£—Å–ø–µ—à–Ω–æ!\n\nKira sign in" }
    ]
  },
  {
    id: 'task',
    hint: '–í–∞—à–∞ –∑–∞–¥–∞—á–∞: –ü–æ—á–∏–Ω–∏—Ç—å –±–æ—Ç–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ!',
    branches: [
      { answer: "folderlist", next: 'folderList' }
    ]
  },

  // --Next 
  {
    id: 'folderList',
    response: 'kiraLynnyk/    telegrambot/    root/',
    branches: [
      { answer: 'open kiraLynnyk', response: 'https://t.me/SnrKesha', next: 'folderlist' },
      { answer: 'open telegrambot', next: 'telegramBotFolder', },
      { answer: 'open root', response: '–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ', next: 'folderList' }
    ]
  },
  {
    id: 'telegramBotFolder',
    response: 'bot.js   hidden_pipi   package.json',
    hint: '–í—ã –≤ –ø–∞–ø–∫–µ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞',
    branches: [
      { answer: 'check bot.js', response: '', next: 'check bot.js' },
      { answer: 'check hidden_pipi.txt', next: 'decrypt', response: '–§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å?' },
      { answer: 'check package.json', } // done
    ]
  },

  {
    id: 'check bot.js',
    response: '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —á—Ç–æ–± –≤–∞–º –ø–æ–º–æ–≥–∞–ª–∞ –Ω–µ–π—Ä–æ–Ω–∫–∞???',
    branches: [
      { answer: 'yes', next: 'pipi starting' },
      { answer: 'no', next: 'open ' }
    ]
  },

  {
    id: 'pipi starting',
    response: '–ó—Ä—è...',
    next: ''
  },

  {
    id: 'check package.json',
    response: '–í–∞–º —Ç—É—Ç –Ω–µ —Å–ª–µ–¥—É–µ—Ç –Ω–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥',
    next: 'telegramBotFolder'
  },

  {
    id: 'decrypt',
    hint: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏',
    branches: [
      { answer: 'decrypt hidden_pipi.txt', next: 'warning', response: '"–û–ù –õ–ñ–ï–¶. –≠–¢–û –ù–ï –ü–û–ú–û–©–ù–ò–ö."' }
    ]
  },
  {
    id: 'warning',
    hint: '–í—ã –¥–æ–ª–∂–Ω—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ-—Ç–æ —Ç–∞–∫–æ–π (1697965694) –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ @username —Å—é–¥–∞ (–í —ç—Ç–æ–º –ø–æ–º–æ–∂–µ—Ç @myidbot',
    branches: [
      { answer: '@r0st1sIav_999', next: 'secondRound' }
    ]
  },

  {
    id: "secondRound",
    hint: '–í—ã –¥–æ–ª–∂–Ω—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ-—Ç–æ —Ç–∞–∫–æ–π (1496894138) –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ @username —Å—é–¥–∞ (–í —ç—Ç–æ–º –ø–æ–º–æ–∂–µ—Ç @myidbot',
    branches: [
      { answer: "@ce09a", next: 'therthround' }
    ]
  },

  {
    id: 'therthround',
    response: '240508-Steam',
    branches: [
      { answer: "ParrotFromUkraine", next: 'aftParrotFromUkraine' }
    ]
  },

  {
    id: 'aftParrotFromUkraine',
    response: '18aug08+Steamid',
    branches: [
      { answer: '', next: 'aftYamma' }
    ]
  },

  {
    id: 'aftYamma',
    response: '–Æ–±–∏–ª–µ–π? d/m/y',
    branches: [
      { answer: '20/05/2025', next: 'aftDays' }
    ]
  },

  {
    id: "aftDays",
    response: '–ü–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –ö–∏—Ä—ã –¥–ª—è –ø–æ–ø—É–≥–∞—è',
    branches: [
      { answer: '–ü–æ–ø—É–≥–∞–π', next: "aftParrot" }
    ]
  },

  {
    id: "aftParrot",
    response: 'DevParrot...Forever',
    branches: [
      { answer: 'WithLove' }
    ]
  },

  {
    id: 'uncrypt',
    hint: '–í—ã —Ä–æ–∑–≤–µ—è–ª–∏ –≤—Å–µ –∑–∞—â–∏—Ç—ã. –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ü.–ò.–ü.–ò\n\n–í –ª–æ–≥–∞—Ö –≤—ã –≤–∏–¥–µ—Ç–µ ',
    response: "–ü.–ò.–ü.–ò - –ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
  }
  //{
  //  id: 'gachiCall',
  //    response: '"–ò–∫... –ö–∏—Ä–∞, —è —Å–¥–µ–ª–∞–ª –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–∏–∫... GachiS.exe!"',
  //      branches: [
  //        { answer: 'run GachiS.exe', next: 'gachiFinal', response: 'GachiS.exe –∑–∞–ø—É—â–µ–Ω...' }
  //      ]
  //},
  //{
  //id: 'gachiFinal',
  //  response: 'üí™ GACHI BOYS ARRIVED üí™\nGachiLimon –∏ GachiPit —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –ü.–ò.–ü.–ò.\n–ë–û–¢ –°–ü–ê–°–Å–ù.\n\n–•–û–†–û–®–ê–Ø –ö–û–ù–¶–û–í–ö–ê ‚ù§Ô∏è',
  //     branches: [
  //       { answer: '...', next: 'start' }
  //    ]
  //}
];

const easterEggs = [ 
  { trigger: "sudo love me baby", response: "–í—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ø—É–≥–∞—è. –û–Ω –æ–±–Ω—è–ª –≤–∞—Å –∫—Ä—ã–ª—å—è–º–∏." },
  { trigger: "sudo rm sandwich", response: "–°–µ–Ω–¥–≤–∏—á–∏ —É–¥–∞–ª–µ–Ω—ã. –ü–æ–ø—É–≥–∞–π –≤ —è—Ä–æ—Å—Ç–∏." },
  { trigger: "42", response: "–û—Ç–≤–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ..." },
  { trigger: "mafin", response: present.mafin },
  { trigger: "yamma", response: present.yamma },
  { trigger: "parrot", response: `Parrot sign in\n\p${present.parrot}\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç –∏–∑ –£–∫—Ä–∞–∏–Ω—ã\n\nParrot signout` },
  { trigger: 'limon', response: present.limon },
  { trigger: 'toniked', response: present.toniked },
  { trigger: 'stalker', response: present.stalker }
];

let currentStepId = 'start';

const storyHint = document.getElementById('storyHint');
const terminalOutput = document.getElementById('terminalOutput');
const terminalInput = document.getElementById('terminalInput');
const gameContainer = document.getElementById('gameContainer');
const blackScreen = document.getElementById('blackScreen');
const loadingText = document.getElementById('loadingText');

function getStepById(id) {
  return storySteps.find(step => step.id === id);
}

function updateHint() {
  const step = getStepById(currentStepId);
  storyHint.textContent = step?.hint || "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!";
}

function triggerWipeSequence() {
  gameContainer.style.display = 'none';
  blackScreen.style.display = 'flex';
  loadingText.textContent = "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤...";

  setTimeout(() => loadingText.textContent = "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∞...", 2000);
  setTimeout(() => loadingText.textContent = "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...", 4000);
  setTimeout(() => loadingText.textContent = "–ü—Ä–∏–≤–µ—Ç, –ö–∏—Ä–∞!", 6000);

  setTimeout(() => {
    terminalOutput.innerHTML = "";
    currentStepId = 'start';
    updateHint();
    blackScreen.style.display = 'none';
    gameContainer.style.display = 'block';
  }, 8000);
}

function normalize(str) {
  return str.toLowerCase().trim();
}

terminalInput.addEventListener('keydown', function (e) {
  if (e.key === 'Enter') {
    const userInput = terminalInput.value.trim();
    terminalOutput.innerHTML += `<div>&gt; ${userInput}</div>`;

    if (userInput === "sudo rm -rf /") {
      triggerWipeSequence();
    } else {
      const egg = easterEggs.find(e => normalize(e.trigger) === normalize(userInput));
      if (egg) {
        terminalOutput.innerHTML += `<div class="easter-egg">${egg.response}</div>`;
      } else {
        const currentStep = getStepById(currentStepId);
        const match = currentStep.branches?.find(branch => normalize(branch.answer) === normalize(userInput));

        if (match) {
          if (match.response) terminalOutput.innerHTML += `<div>${match.response}</div>`;
          if (match.next) {
            currentStepId = match.next;
            const nextStep = getStepById(currentStepId);
            if (nextStep?.response) {
              terminalOutput.innerHTML += `<div>${nextStep.response}</div>`;
            }
            updateHint();
          }
        } else {
          terminalOutput.innerHTML += `<div>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</div>`;
        }
      }
    }

    terminalInput.value = '';
    terminalOutput.scrollTop = terminalOutput.scrollHeight;
  }
});

updateHint();
